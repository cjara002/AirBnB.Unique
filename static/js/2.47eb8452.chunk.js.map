{"version":3,"sources":["components/Contacts/ContactFormSchema.js","components/Contacts/ContactFormPage.jsx","Redux/Actions/Cleaners/cleanerAction.js"],"names":["ContactFormSchema","Yup","shape","name","min","max","required","yearsinoperation","imageurl","city","description","ContactFormPage","state","formData","isEditing","handleSubmit","values","props","updateCleaner","then","onUpdateSuccess","catch","onUpdateError","addCleaner","addCleanerSuccess","addCleanerError","Swal","fire","history","push","onCancel","this","match","params","id","GetSingleCleaner","setState","singleCleaner","yearsInOperation","imageUrl","console","log","Fragment","enableReinitialize","validationSchema","initialValues","onSubmit","touched","errors","isValid","isSubmitting","className","Form","FormGroup","row","Col","sm","Label","type","value","component","rows","onClick","disabled","React","Component","connect","store","getCleaners","dispatch","axios","get","response","payload","data","error","user","post","put","deleteCleaner","delete"],"mappings":"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","file":"static/js/2.47eb8452.chunk.js","sourcesContent":["import * as Yup from \"yup\";\r\n\r\nconst ContactFormSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n    .min(1, \"Your name is too short.\")\r\n    .max(100,\"Your name cannot be over 100 characters.\")\r\n    .required(\"Name is required.\"),\r\n\r\n    yearsinoperation: Yup.string().required(\"Number of years is required.\"),\r\n\r\n    imageurl: Yup.string()\r\n    .min(1, \"The link is too short.\" )\r\n    .max(255, \"The image URL should be less than 255 charcters.\")\r\n    .required(\"A photo is required.\"),\r\n    \r\n    city: Yup.string()\r\n    .min(1, \"Your city name is too short.\")\r\n    .max(50, \"Your city name cannot be over 50 charcters.\")\r\n    .required(\"A city is required\"),\r\n\r\n    description: Yup.string()\r\n    .min(1, \"Your description is too short.\")\r\n    .max(250, \"Your description cannot exceed 250 characters.\")\r\n    .required(\"A description is required.\"),\r\n\r\n});\r\n\r\nexport default ContactFormSchema;","import React from \"react\";\r\nimport { Formik, Field } from \"formik\";\r\nimport ContactFormSchema from \"./ContactFormSchema\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Col, Form, FormGroup, Label } from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  addCleaner,\r\n  GetSingleCleaner,\r\n  updateCleaner\r\n} from \"../../Redux/Actions/Cleaners/cleanerAction\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nclass ContactFormPage extends React.Component {\r\n  state = {\r\n    formData: {\r\n      name: \"\",\r\n      yearsinoperation: \"\",\r\n      imageurl: \"\",\r\n      city: \"\",\r\n      description: \"\",\r\n    },\r\n    isEditing: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    // debugger;\r\n    if (this.props.match.params && this.props.match.params.id) {\r\n      this.props.GetSingleCleaner(this.props.match.params.id);\r\n      // var single = this.props.singleCleaner;\r\n      this.setState(( ) => {\r\n        return {\r\n          formData: {\r\n            name: this.props.singleCleaner[0].name,\r\n            yearsinoperation: this.props.singleCleaner[0].yearsInOperation,\r\n            imageurl: this.props.singleCleaner[0].imageUrl,\r\n            city: this.props.singleCleaner[0].city,\r\n            description: this.props.singleCleaner[0].description,\r\n            id: this.props.singleCleaner[0].id,\r\n          },\r\n          isEditing: true\r\n        };\r\n      }, console.log(\"showFormData:\", this.state.formData));\r\n    }\r\n  }\r\n\r\n  // showSingleCleaner = () => {\r\n\r\n  // }\r\n\r\n  handleSubmit = (values) => {\r\n    //debugger does not work. .then is not working either.\r\n\r\n    if (!this.state.isEditing) {\r\n      this.props\r\n      .addCleaner(values)\r\n      .then(this.addCleanerSuccess)\r\n      .catch(this.addCleanerError);\r\n    } else {\r\n      // debugger;\r\n      this.props\r\n        .updateCleaner(values)\r\n        .then(this.onUpdateSuccess)\r\n        .catch(this.onUpdateError);\r\n    }\r\n  };\r\n\r\n  addCleanerSuccess = () => {\r\n    //   debugger;\r\n    Swal.fire(\"New Cleaner Added.\", \"success\");\r\n    this.props.history.push(\"/cleaners\");\r\n  };\r\n\r\n  addCleanerError = () => {\r\n    Swal.fire(\"Something is not right. Please try again.\", \"error\");\r\n  };\r\n\r\n  onUpdateSuccess = () => {\r\n    //   debugger;\r\n    Swal.fire(\"Cleaner Updated.\", \"success\");\r\n    this.props.history.push(\"/cleaners\");\r\n  };\r\n\r\n  onUpdateError = () => {\r\n    Swal.fire(\"Something is not right. Please try again.\", \"error\");\r\n  };\r\n\r\n  onCancel = () => {\r\n    this.props.history.push(\"/cleaners\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Formik\r\n          enableReinitialize={true}\r\n          validationSchema={ContactFormSchema}\r\n          initialValues={this.state.formData}\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          {(props) => {\r\n            const {\r\n              values,\r\n              touched,\r\n              errors,\r\n              handleSubmit,\r\n              isValid,\r\n              isSubmitting,\r\n            } = props;\r\n            return (\r\n              <div className=\"col-6\">\r\n                <Form\r\n                  onSubmit={handleSubmit}\r\n                  // className=\"containerFaq\"\r\n                  // id=\"faqBox\"\r\n                >\r\n                  <FormGroup row>\r\n                    <Col\r\n                      sm={10}\r\n                      //   className=\"colFaq\"\r\n                    >\r\n                      <Label>Name </Label>\r\n                      <Field\r\n                        name=\"name\"\r\n                        type=\"text\"\r\n                        value={values.name}\r\n                        //   placeholder=\"Please write a questions here..\"\r\n                        className={\r\n                          errors.name && touched.name\r\n                            ? \"form-control error\"\r\n                            : \"form-control\"\r\n                        }\r\n                      />\r\n                      {errors.name && touched.name && (\r\n                        <span className=\"input-feedback text-danger\">\r\n                          {errors.name}\r\n                        </span>\r\n                      )}\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  {/* <FormGroup row>\r\n                      <Col\r\n                        sm={10}\r\n                        //   className=\"colFaq\"\r\n                      >\r\n                            <Label>Years In Operation </Label>\r\n                        <Field\r\n                          name=\"yearsinoperation\"\r\n                          type=\"text\"\r\n                        //   type=\"number\"\r\n                          //   component=\"select\"\r\n                          value={values.yearsinoperation}\r\n                          className={\r\n                            errors.yearsinoperation && touched.yearsinoperation\r\n                              ? \"form-control error\"\r\n                              : \"form-control\"\r\n                          }\r\n                        >\r\n                          {errors.yearsinoperation && touched.yearsinoperation && (\r\n                            <span className=\"input-feedback text-danger\">\r\n                              {errors.yearsinoperation}\r\n                            </span>\r\n                          )}\r\n                        </Field>\r\n                      </Col>\r\n                    </FormGroup> */}\r\n\r\n                  <FormGroup row>\r\n                    <Col\r\n                      sm={10}\r\n                      //   className=\"colFaq\"\r\n                    >\r\n                      <Label>Years In Operation </Label>\r\n                      <Field\r\n                        name=\"yearsinoperation\"\r\n                        type=\"number\"\r\n                        value={values.yearsinoperation}\r\n                        //   placeholder=\"Please write a questions here..\"\r\n                        className={\r\n                          errors.yearsinoperation && touched.yearsinoperation\r\n                            ? \"form-control error\"\r\n                            : \"form-control\"\r\n                        }\r\n                      />\r\n                      {errors.yearsinoperation && touched.yearsinoperation && (\r\n                        <span className=\"input-feedback text-danger\">\r\n                          {errors.yearsinoperation}\r\n                        </span>\r\n                      )}\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup row>\r\n                    <Col\r\n                      sm={10}\r\n                      //   className=\"colFaq\"\r\n                    >\r\n                      <Label>Image </Label>\r\n                      <Field\r\n                        name=\"imageurl\"\r\n                        type=\"text\"\r\n                        //   component=\"textarea\"\r\n                        //   rows=\"5\"\r\n                        value={values.imageurl}\r\n                        //   placeholder=\"Please write an answere here...\"\r\n                        className={\r\n                          errors.imageurl && touched.imageurl\r\n                            ? \"form-control error\"\r\n                            : \"form-control\"\r\n                        }\r\n                      />\r\n                      {errors.imageurl && touched.imageurl && (\r\n                        <span className=\"input-feedback text-danger\">\r\n                          {errors.imageurl}\r\n                        </span>\r\n                      )}\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup row>\r\n                    <Col\r\n                      sm={10}\r\n                      //   className=\"colFaq\"\r\n                    >\r\n                      <Label>City </Label>\r\n                      <Field\r\n                        name=\"city\"\r\n                        //   component=\"textarea\"\r\n                        //   rows=\"5\"\r\n                        value={values.city}\r\n                        //   placeholder=\"Please write an answere here...\"\r\n                        className={\r\n                          errors.city && touched.city\r\n                            ? \"form-control error\"\r\n                            : \"form-control\"\r\n                        }\r\n                      />\r\n                      {errors.city && touched.city && (\r\n                        <span className=\"input-feedback text-danger\">\r\n                          {errors.city}\r\n                        </span>\r\n                      )}\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  <FormGroup row>\r\n                    <Col\r\n                      sm={10}\r\n                      //   className=\"colFaq\"\r\n                    >\r\n                      <Label>Description </Label>\r\n                      <Field\r\n                        name=\"description\"\r\n                        component=\"textarea\"\r\n                        rows=\"5\"\r\n                        value={values.description}\r\n                        //   placeholder=\"Please write an descriptione here...\"\r\n                        className={\r\n                          errors.description && touched.description\r\n                            ? \"form-control error\"\r\n                            : \"form-control\"\r\n                        }\r\n                      />\r\n                      {errors.description && touched.description && (\r\n                        <span className=\"input-feedback text-danger\">\r\n                          {errors.description}\r\n                        </span>\r\n                      )}\r\n                    </Col>\r\n                  </FormGroup>\r\n\r\n                  {/* <FormGroup style={{ textAlign: \"right\", padding: \"10px\" }}> */}\r\n                  <FormGroup>\r\n                    <button\r\n                      className=\"btn btn-outline-custom\"\r\n                      // id=\"faqCancel\"\r\n                      type=\"submit\"\r\n                      onClick={this.onCancel}\r\n                    >\r\n                      Cancel\r\n                    </button>\r\n\r\n                    {this.state.isEditing ? (\r\n                      <button\r\n                        className=\"btn btn-outline-custom\"\r\n                        type=\"submit\"\r\n                        disabled={!isValid || isSubmitting}\r\n                      >\r\n                        Update\r\n                      </button>\r\n                    ) : (\r\n                      <button\r\n                        className=\"btn btn-outline-custom\"\r\n                        type=\"submit\"\r\n                        disabled={!isValid || isSubmitting}\r\n                      >\r\n                        Add\r\n                      </button>\r\n                    )}\r\n                  </FormGroup>\r\n                </Form>\r\n              </div>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToPros(store) {\r\n  return {\r\n    singleCleaner: store.singleCleaner\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToPros, { addCleaner, GetSingleCleaner, updateCleaner })(ContactFormPage);\r\n// export default connect(null, { addCleaner, GetSingleCleaner })(ContactFormPage);\r\n","import axios from \"axios\";\r\n\r\nexport const getCleaners = (dispatch) => {\r\n  return (dispatch) => {\r\n  dispatch({ type: \"FETCH_CLEANERS_START\" });\r\n  axios\r\n    .get(\"https://localhost:5001/api/cleaners\")\r\n    .then((response) => {\r\n      dispatch({\r\n        type: \"RECEIVE_CLEANERS\",\r\n        payload: response.data,\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: \"FETCH_CLEANERS_ERROR\",\r\n        payload: error,\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport const addCleaner = (user) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .post(\"https://localhost:5001/api/cleaners\",  user )\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"ADD_CLEANER\",\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: \"ADD_CLEANER_ERROR\",\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const GetSingleCleaner = (id) => {\r\n  // debugger;\r\n  return (dispatch) => {\r\n    axios\r\n      .get(`https://localhost:5001/api/cleaners/${id}` )\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_SINGLE_CLEANER\",\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: \"GET_SINGLE_CLEANER_ERROR\",\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\nexport const updateCleaner = (user) => {\r\n  // debugger;\r\n  return (dispatch) => {\r\n    axios\r\n      // .put(\"https://localhost:5001/api/cleaners/\", user )\r\n      .put(`https://localhost:5001/api/cleaners/${user.id}`, user )\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_CLEANER\",\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: \"UPDATE_CLEANER_ERROR\",\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\nexport const deleteCleaner = (id) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .delete(`https://localhost:5001/api/cleaners/${id}` )\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"DELETE_CLEANER\",\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: \"DELETE_CLEANER_ERROR\",\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\n"],"sourceRoot":""}