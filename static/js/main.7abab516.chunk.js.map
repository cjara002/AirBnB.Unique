{"version":3,"sources":["components/common/PageLoader.jsx","start/cleanerRoutes.js","start/AppRoutes.js","Redux/MiddleWare/middleware.js","Redux/Reducer/cleanerReducer.js","Store.js","App.jsx","serviceWorker.js","index.js"],"names":["React","memo","className","cleanerRoutes","exact","path","component","lazy","Base","AppRoutes","props","mapRoutes","route","Component","key","render","getCleanerContact","fallback","TransitionGroup","CSSTransition","currentKey","timeout","classNames","animationName","exit","location","state","currentUser","isLoggedIn","map","pathname","split","enter","this","withRouter","middleware","applyMiddleware","thunk","Store","next","action","console","log","e","intialState","fetching","fetched","cleaners","singleCleaner","error","cleanerReducer","type","payload","newCleaner","concat","updateCleaner","deleteCleaner","createStore","reducer","App","Fragment","store","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAQeA,MAAMC,MANF,kBACf,yBAAKC,UAAU,eACX,wBAAIA,UAAU,qDCgBPC,EAlBO,CAClB,CACIC,OAAO,EACPC,KAAM,YACNC,UAAWC,gBAAK,kBAAM,+DAE1B,CACIH,OAAO,EACPC,KAAM,gBACNC,UAAWC,gBAAK,kBAAM,+DAE1B,CACIH,OAAO,EACPC,KAAM,yBACNC,UAAWC,gBAAK,kBAAM,gECXxBC,EAAOD,gBAAM,kBAAM,iCAenBE,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAWVC,UAAY,SAAAC,GACR,IAAIC,EAAYD,EAAMN,UACtB,OACI,kBAAC,IAAD,CACCQ,IAAKF,EAAMP,KACXA,KAAMO,EAAMP,KACZD,MAAOQ,EAAMR,MACbW,OAAQ,SAAAL,GAAK,OACT,kBAACG,EAAcH,OApBT,EAgDnBM,kBAAoB,WAEhB,OACI,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAChB,kBAACT,EAAD,KACA,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACAL,IAAK,EAAKM,WACVC,QAAS,EAAKA,QACdC,WAAY,EAAKC,cACjBC,MAAM,GAEF,6BACG,kBAAC,WAAD,CAAUP,SAAU,kBAAC,EAAD,OAChB,kBAAC,IAAD,CAAQQ,SAAU,EAAKf,MAAMe,UACvB,EAAKC,MAAMvB,sBA7DxC,EAAKuB,MAAO,CACRC,YAAa,GACbC,YAAY,EACZzB,cAAeA,EAAc0B,IAAI,EAAKlB,YAE1C,EAAKS,WAAaV,EAAMe,SAASK,SAASC,MAAM,KAAK,IAAM,IAC3D,EAAKV,QAAU,CAAEW,MAAO,IAAKR,KAAM,KACnC,EAAKD,cAAgB,aATN,E,sEA6Cf,OAVcU,KAAKjB,wB,GApCHhB,IAAMa,WAwFfqB,cAAWzB,G,gCCzFT0B,EAFIC,YAAgBC,KAdtB,SAACC,GAAD,OAAW,SAACC,GAAD,OAAU,SAACC,GACjCC,QAAQC,IAAI,eAAgBF,GAC5BD,EAAKC,QAGO,SAACF,GAAD,OAAW,SAACC,GAAD,OAAU,SAACC,GAClC,IACED,EAAKC,GACL,MAAOG,GACPF,QAAQC,IAAI,uBAAwBC,S,ikBCZ1C,IAAMC,EAAc,CAClBC,UAAU,EACVC,SAAS,EACTC,SAAU,GACVC,cAAe,GACfC,MAAO,MAgFMC,EA7EQ,WAAkC,IAAjCxB,EAAgC,uDAAxBkB,EAAaJ,EAAW,uCAEtD,OAAQA,EAAOW,MACb,IAAK,uBACH,OAAO,EAAP,GAAYzB,EAAZ,CAAmBmB,UAAU,IAE/B,IAAK,uBACH,OAAO,EAAP,GAAYnB,EAAZ,CAAmBmB,UAAU,EAAOI,MAAOT,EAAOY,UAEpD,IAAK,mBACH1B,EAAK,KACAA,EADA,CAEHmB,UAAU,EACVC,SAAS,EACTC,SAAUP,EAAOY,UAEnB,MAEF,IAAK,cACD,IAAMC,EAAa3B,EAAMqB,SAASO,OAAOd,EAAOY,SAClD1B,EAAK,KACAA,EADA,CAEHmB,UAAU,EACVC,SAAS,EACTO,eAEF,MAEF,IAAK,qBACD,OAAO,EAAP,GAAY3B,EAAZ,CAAmBmB,UAAU,EAAOI,MAAOT,EAAOY,UAEtD,IAAK,qBACD,IAAMJ,EAAgBR,EAAOY,QAC/B1B,EAAK,KACAA,EADA,CAEHmB,UAAU,EACVC,SAAS,EACTE,kBAEF,MAEF,IAAK,2BACD,OAAO,EAAP,GAAYtB,EAAZ,CAAmBmB,UAAU,EAAOI,MAAOT,EAAOY,UAEpD,IAAK,iBACH,IAAMG,EAAgBf,EAAOY,QAC/B1B,EAAK,KACAA,EADA,CAEHmB,UAAU,EACVC,SAAS,EACTS,kBAEF,MAEF,IAAK,wBACD,OAAO,EAAP,GAAY7B,EAAZ,CAAmBmB,UAAU,EAAOI,MAAOT,EAAOY,UAEpD,IAAK,iBACH,IAAMI,EAAgBhB,EAAOY,QAC/B1B,EAAK,KACAA,EADA,CAEHmB,UAAU,EACVC,SAAS,EACTU,kBAEF,MAEF,IAAK,uBACD,OAAO,EAAP,GAAY9B,EAAZ,CAAmBmB,UAAU,EAAOI,MAAOT,EAAOY,UAMxD,OAAO1B,GC5EMY,EAFDmB,YAAYC,EAASvB,GCG7BwB,E,iLAIF,OADAlB,QAAQC,IAAI,6BAEV,kBAAC,IAAMkB,SAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GAEf,kBAAC,EAAD,Y,GARQ7D,IAAMa,WAgBTqB,cAAWyB,GCXNG,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2D,YCVNC,IAASnD,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFoD,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7abab516.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst PageLoader = () => (\r\n    <div className=\"page-loader\">\r\n        <em className=\"fas fa-circle-notch fa-spin fa-2x text-muted\" />\r\n    </div>\r\n);\r\n\r\nexport default React.memo(PageLoader);","import { lazy } from \"react\";\r\n\r\nconst cleanerRoutes = [\r\n    {\r\n        exact: true,\r\n        path: \"/cleaners\",\r\n        component: lazy(() => import(\"../components/Contacts/Contact.jsx\"))\r\n    },\r\n    {\r\n        exact: true,\r\n        path: \"/cleanersform\",\r\n        component: lazy(() => import(\"../components/Contacts/ContactFormPage\"))\r\n    },\r\n    {\r\n        exact: true,\r\n        path: \"/cleanersform/:id/edit\",\r\n        component: lazy(() => import(\"../components/Contacts/ContactFormPage\"))\r\n    },\r\n];\r\n\r\nexport default cleanerRoutes;","import { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport React, {Suspense, lazy } from \"react\";\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\nimport PageLoader from \"../components/common/PageLoader\";\r\nimport cleanerRoutes from \"./cleanerRoutes.js\";\r\nconst Base = lazy (() => import (\"../components/layout/Base\"));\r\n\r\n// const listofPages = [\r\n//     \"/\",\r\n//     \"/login\",\r\n//     \"/register\",\r\n//     \"/recover\",\r\n//     \"/lock\",\r\n//     \"/notfound\",\r\n//     \"/error500\",\r\n//     \"/maintenance\",\r\n//     \"/restricted\",\r\n//     \"/confirm\"\r\n//   ];\r\n\r\nclass AppRoutes extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            currentUser: {},\r\n            isLoggedIn: false,\r\n            cleanerRoutes: cleanerRoutes.map(this.mapRoutes)\r\n        };\r\n        this.currentKey = props.location.pathname.split(\"/\")[1] || \"/\";\r\n        this.timeout = { enter: 500, exit: 500 };\r\n        this.animationName = \"rag-fadeIn\";\r\n    }\r\n\r\n    mapRoutes = route => {\r\n        let Component = route.component;\r\n        return (\r\n            <Route \r\n             key={route.path}\r\n             path={route.path}\r\n             exact={route.exact}\r\n             render={props => (\r\n                 <Component {...props} />\r\n             )}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        // let pathArr = this.props.location.pathname.split(\"/\");\r\n        // let newPath = \"/\" + pathArr[1];\r\n        let content = null;\r\n        // if( \r\n        //     listofPages.includes(this.props.location.pathname) ||\r\n        //     listofPages.includes(newPath)        \r\n        // ) \r\n        // {\r\n            content = this.getCleanerContact();\r\n        // }\r\n        \r\n        // {\r\n        //     content = this.getSimplePageContent();\r\n        // } else if (this.state.allRoutes){\r\n        //     content = this.getAllRoutes();\r\n        // }\r\n\r\n\r\n        return content;\r\n    }\r\n\r\n    getCleanerContact = () => {\r\n        // console.log(\"getCleanerContact:\", this.state.cleanerRoutes)\r\n        return ( \r\n            <Suspense fallback={<PageLoader />}>\r\n                <Base >\r\n                <TransitionGroup>\r\n                    <CSSTransition\r\n                    key={this.currentKey}\r\n                    timeout={this.timeout}\r\n                    classNames={this.animationName}\r\n                    exit={false}\r\n                    >\r\n                        <div>\r\n                           <Suspense fallback={<PageLoader />}>\r\n                               <Switch location={this.props.location}>\r\n                                    {this.state.cleanerRoutes}\r\n                               </Switch>\r\n                           </Suspense> \r\n                        </div>\r\n                    </CSSTransition>\r\n                </TransitionGroup>\r\n                </Base>\r\n            </Suspense>\r\n        );\r\n    };\r\n\r\n    // getSimplePageContent = () => {\r\n    //     return(\r\n    //         <BasePage>\r\n    //         <Suspense fallback={<PageLoader />}>\r\n    //         <Switch location ={this.props.location}>\r\n\r\n    //         </Switch>\r\n    //         </Suspense>\r\n    //         </BasePage>\r\n    //     )\r\n    // }\r\n}\r\n\r\nexport default withRouter(AppRoutes);","import { applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst logger = (Store) => (next) => (action) => {\r\n    console.log(\"action fired\", action);\r\n    next(action);\r\n  }\r\n  \r\n  const error = (Store) => (next) => (action) => {\r\n    try {\r\n      next(action);\r\n    } catch (e) {\r\n      console.log(\"action not completed\", e)\r\n    }\r\n  }\r\n  \r\n  // const middleware = applyMiddleware(logger, error);\r\n  const middleware = applyMiddleware(thunk, logger, error);\r\n\r\n  export default middleware;","const intialState = {\r\n  fetching: false,\r\n  fetched: false,\r\n  cleaners: [],\r\n  singleCleaner: [],\r\n  error: null,\r\n};\r\n\r\nconst cleanerReducer = (state = intialState, action) => {\r\n  // debugger;\r\n  switch (action.type) {\r\n    case \"FETCH_CLEANERS_START\": {\r\n      return { ...state, fetching: true };\r\n    }\r\n    case \"FETCH_CLEANERS_ERROR\": {\r\n      return { ...state, fetching: false, error: action.payload };\r\n    }\r\n    case \"RECEIVE_CLEANERS\": {\r\n      state = {\r\n        ...state,\r\n        fetching: true,\r\n        fetched: true,\r\n        cleaners: action.payload,\r\n      };\r\n      break;\r\n    }\r\n    case \"ADD_CLEANER\": {\r\n        const newCleaner = state.cleaners.concat(action.payload)\r\n      state = {\r\n        ...state,\r\n        fetching: true,\r\n        fetched: true,\r\n        newCleaner\r\n      };\r\n      break;\r\n    }\r\n    case \"ADD_CLEANERS_ERROR\": {\r\n        return { ...state, fetching: false, error: action.payload };\r\n      }\r\n    case \"GET_SINGLE_CLEANER\": {\r\n        const singleCleaner = action.payload\r\n      state = {\r\n        ...state,\r\n        fetching: true,\r\n        fetched: true,\r\n        singleCleaner\r\n      };\r\n      break;\r\n    }\r\n    case \"GET_SINGLE_CLEANER_ERROR\": {\r\n        return { ...state, fetching: false, error: action.payload };\r\n      }\r\n      case \"UPDATE_CLEANER\": {\r\n        const updateCleaner = action.payload\r\n      state = {\r\n        ...state,\r\n        fetching: true,\r\n        fetched: true,\r\n        updateCleaner\r\n      };\r\n      break;\r\n    }\r\n    case \"UPDATE_CLEANERS_ERROR\": {\r\n        return { ...state, fetching: false, error: action.payload };\r\n      }\r\n      case \"DELETE_CLEANER\": {\r\n        const deleteCleaner = action.payload\r\n      state = {\r\n        ...state,\r\n        fetching: true,\r\n        fetched: true,\r\n        deleteCleaner\r\n      };\r\n      break;\r\n    }\r\n    case \"DELETE_CLEANER_ERROR\": {\r\n        return { ...state, fetching: false, error: action.payload };\r\n      }\r\n    default: {\r\n      break;\r\n    }\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default cleanerReducer;\r\n","import { createStore } from \"redux\";\r\nimport middleware from \"./Redux/MiddleWare/middleware\"\r\nimport reducer from \"./Redux/Reducer/cleanerReducer\"\r\n\r\nconst Store = createStore(reducer, middleware);\r\n\r\nexport default Store;","import React from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport AppRoutes from \"./start/AppRoutes\";\r\nimport \"./App.css\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Store\";\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n    console.log(\"Starting App from App.jsx\");\r\n    return (\r\n      <React.Fragment>\r\n        <Provider store={store}>\r\n          {/* <div className=\"App\"> */}\r\n          <AppRoutes />\r\n          {/* </div> */}\r\n        </Provider>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App.jsx\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n// import { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}