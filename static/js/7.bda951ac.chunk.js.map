{"version":3,"sources":["components/Contacts/ContactHeading.jsx","components/Contacts/SingleCleanerView.jsx","components/Contacts/ContactCleaners.jsx","components/Contacts/Contact.jsx","Redux/Actions/Cleaners/cleanerAction.js"],"names":["ContactHeading","submitNewCleaner","props","history","push","Fragment","className","id","style","cursor","data-toggle","title","onClick","this","React","Component","SingleCleanerView","state","optionsOpen","showMenu","setState","prevState","Modal","isOpen","isModal","ModalHeader","toggle","single","name","ModalBody","type","aria-haspopup","aria-expanded","tabIndex","role","aria-hidden","x-placement","position","willChange","top","left","transform","data-placement","updateContact","deleteContact","src","imageUrl","alt","city","description","yearsInOperation","ContactCleaners","modal","showModal","profile","GetSingleCleaner","singleCleaner","console","log","updateSingleContact","deleteContactUserConfirmation","Swal","fire","text","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","then","result","value","deleteSingleCleaner","deleteCleaner","onDeleteSuccess","getCleaners","onDeleteError","cleaners","map","key","connect","store","Contact","imageLoaded","dispatch","axios","get","response","payload","data","catch","error","addCleaner","user","post","updateCleaner","put","delete"],"mappings":"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","file":"static/js/7.bda951ac.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass ContactHeading extends React.Component {\r\n\r\n  submitNewCleaner = () => {\r\n    const path = \"/cleanersform\";\r\n    this.props.history.push(path);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"content-heading\">\r\n          Cleaners\r\n          <div className=\"ml-auto\">\r\n            <em\r\n              className=\"fa-1x mr-2 fas fa-search\"\r\n              id=\"searchProfiles\"\r\n              style={{ cursor: \"pointer\" }}\r\n              data-toggle=\"tooltip\"\r\n              title=\"Search Cleaners\"\r\n            ></em>\r\n            {\" \"}\r\n            <em\r\n              className=\"fa-1x mr-2 fas fa-user-plus\"\r\n              onClick={this.submitNewCleaner}\r\n              style={{ cursor: \"pointer\" }}\r\n              data-toggle=\"tooltip\"\r\n              title=\"Add Cleaner\"\r\n            ></em>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactHeading;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n} from \"reactstrap\";\r\nimport \"./ContactStyles.css\";\r\n// import { connect } from \"react-redux\";\r\n// import { GetSingleCleaner } from \"../../Redux/Actions/Cleaners/cleanerAction\";\r\n\r\nclass SingleCleanerView extends React.Component {\r\n  state = {\r\n    optionsOpen: false,\r\n  };\r\n\r\n    showMenu = () => {\r\n    this.setState((prevState) => ({\r\n      optionsOpen: !prevState.optionsOpen,\r\n    }));\r\n  };\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n\r\n              <Modal isOpen={this.props.isModal}>\r\n                <ModalHeader\r\n                  toggle={this.props.toggle}\r\n\r\n                >\r\n                  <div>\r\n                  {this.props.single[0] && this.props.single[0].name}\r\n                  </div>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                  {/* Start of menu */}\r\n                <div className=\"ml-auto\" id=\"menuShortcut\">\r\n                    <div className=\"dropdown\">\r\n                      <button\r\n                        type=\"button\"\r\n                        aria-haspopup=\"true\"\r\n                        aria-expanded=\"false\"\r\n                        className=\"btn btn-outline-secondary\"\r\n                        onClick={this.showMenu}\r\n                      >\r\n                        <em\r\n                          className=\"fa fa-ellipsis-h fa-lg\"\r\n                          id=\"toggleButton\"\r\n                        />\r\n                      </button>\r\n                      <div\r\n                        tabIndex={-1}\r\n                        role=\"menu\"\r\n                        aria-hidden=\"true\"\r\n                        className={\r\n                          this.state.optionsOpen\r\n                            ? \"dropdown-menu-right-forced animated fadeInLeft dropdown-menu show\"\r\n                            : \"dropdown-menu-right-forced animated fadeInLeft dropdown-menu\"\r\n                        }\r\n                        x-placement=\"bottom-start\"\r\n                        style={{\r\n                          position: \"absolute\",\r\n                          willChange: \"transform\",\r\n                          top: 0,\r\n                          left: 0,\r\n                          transform: \"translate3d(-106px, 31px, 0px)\",\r\n                        }}\r\n                        data-placement=\"bottom-start\"\r\n                        id=\"subMenu\"\r\n                      >\r\n                        <button\r\n                          type=\"button\"\r\n                          tabIndex={0}\r\n                          className=\"dropdown-item\"\r\n                          id=\"subMenuIcon\"\r\n                          onClick={() => this.props.updateContact(this.props.single[0].id)}\r\n                        >\r\n                          <em className=\"fa-fw fa fa-plus mr-2\" />\r\n                          <span\r\n                         \r\n                    // onClick={() => props.onUpdate(props.busProfile.id)}\r\n\r\n                          >Edit contact</span>\r\n                        </button>\r\n\r\n                         {/* <button\r\n                        type=\"button\"\r\n                        tabIndex={0}\r\n                        className=\"dropdown-item\"\r\n\r\n                      >\r\n                        <em className=\"fa-fw fa fa-plus mr-2\" />\r\n                        <span>New contact</span>\r\n                      </button>  */}\r\n\r\n                        <button\r\n                          type=\"button\"\r\n                          tabIndex={0}\r\n                          className=\"dropdown-item\"\r\n                          id=\"subMenuIcon\"\r\n                          onClick={() => this.props.deleteContact(this.props.single[0].id)}\r\n                        >\r\n                          <em className=\"fa-fw fas fa-minus mr-2\" />\r\n                          <span>Delete contact</span>\r\n                        </button>\r\n                        {/* <button\r\n                          type=\"button\"\r\n                          tabIndex={0}\r\n                          className=\"dropdown-item\"\r\n                          id=\"subMenuIcon\"\r\n                        >\r\n                          <em className=\"fa-fw fas fa-share mr-2\" />\r\n                          <span>Share contact</span>\r\n                        </button> */}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                        {/* End of menu */}\r\n                <div className=\"container\">\r\n                  <div className=\"verticalCenter\">\r\n                  <img\r\n                        className=\" mb-2 rounded-circle-thumb32\"\r\n                        src={this.props.single[0] && this.props.single[0].imageUrl}\r\n                        alt=\"Contact\"\r\n                        id=\"profilePhoto\"\r\n                      />\r\n                      {/* <h4>{profile.name}</h4> */}\r\n                      <h5> City: {this.props.single[0] && this.props.single[0].city}</h5>\r\n                     <p>{this.props.single[0] && this.props.single[0].description}</p>\r\n                      <span>Years in operation: {this.props.single[0] && this.props.single[0].yearsInOperation}</span> \r\n                      </div>\r\n                </div>\r\n                </ModalBody>\r\n              </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n// function mapStateToProps(store) {\r\n//   return {\r\n//     singleCleaner: store.singleCleaner\r\n//   }\r\n// }\r\n// export default connect(mapStateToProps, { GetSingleCleaner })(SingleCleanerView);\r\nexport default SingleCleanerView;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getCleaners, GetSingleCleaner, deleteCleaner } from \"../../Redux/Actions/Cleaners/cleanerAction\";\r\nimport SingleCleanerView from \"./SingleCleanerView\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nclass ContactCleaners extends React.Component {\r\n\r\n  componentDidMount() {\r\n    this.props.getCleaners();\r\n  }\r\n\r\n  state = {\r\n    modal: false,\r\n  };\r\n\r\n  showModal = profile => {\r\n    this.props.GetSingleCleaner(profile);\r\n  var single = this.props.singleCleaner\r\n  this.setState(\r\n    prevState => {\r\n      return {\r\n    modal: !prevState.modal,\r\n    singleCleaner: single\r\n  };\r\n},\r\nconsole.log(\"showModal:\", this.state.singleCleaner)\r\n);\r\n};\r\n\r\ntoggle = () => {\r\n  this.setState((prevState) => ({\r\n    modal: !prevState.modal,\r\n  }));\r\n};\r\n\r\nupdateSingleContact = id => {\r\n  this.props.history.push(`/cleanersform/${id}/edit`);\r\n}\r\n\r\ndeleteContactUserConfirmation = (id) => {\r\n  Swal.fire({\r\n    title: \"Are you sure?\",\r\n    text: \"You won't be able to revert this!\",\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"#042A38\",\r\n    cancelButtonColor: \"#d33\",\r\n    confirmButtonText: \"Yes, delete it!\",\r\n  }).then((result) => {\r\n    if (result.value) {\r\n      this.deleteSingleCleaner(id);\r\n    }\r\n  });\r\n};\r\n\r\ndeleteSingleCleaner = (id) => {\r\nthis.props.deleteCleaner(id)\r\n// .then(this.onDeleteSuccess)\r\n// .catch(this.onDeleteError)\r\nSwal.fire(\"Deleted!\");\r\n};\r\n\r\nonDeleteSuccess = () => {\r\n  //   debugger;\r\n  // Swal.fire(\"Cleaner Updated.\", \"success\");\r\n  this.props.getCleaners();\r\n};\r\n\r\nonDeleteError = () => {\r\n  Swal.fire(\"Something is not right. Please try again.\", \"error\");\r\n};\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"row\">\r\n          {this.props &&\r\n            this.props.cleaners.map((profile) => (\r\n              <div className=\"col-sm-6 col-lg-4\" key={profile.id}>\r\n                <div className=\"card-default card\" id=\"contactMenu\">\r\n                  {/*\r\n                  <div className=\"ml-auto\" id=\"menuShortcut\">\r\n                    <div className=\"dropdown\">\r\n                      <button\r\n                        type=\"button\"\r\n                        aria-haspopup=\"true\"\r\n                        aria-expanded=\"false\"\r\n                        className=\"btn btn-outline-secondary\"\r\n                        onClick={this.showMenu}\r\n                        // onClick={this.activeMenu}\r\n                      >\r\n                        <em\r\n                          className=\"fa fa-ellipsis-h fa-lg\"\r\n                          id=\"toggleButton\"\r\n                        />\r\n                      </button>\r\n                      <div\r\n                        tabIndex={-1}\r\n                        role=\"menu\"\r\n                        aria-hidden=\"true\"\r\n                        className={\r\n                          this.state.optionsOpen\r\n                            ? \"dropdown-menu-right-forced animated fadeInLeft dropdown-menu show\"\r\n                            : \"dropdown-menu-right-forced animated fadeInLeft dropdown-menu\"\r\n                        }\r\n                        x-placement=\"bottom-start\"\r\n                        style={{\r\n                          position: \"absolute\",\r\n                          willChange: \"transform\",\r\n                          top: 0,\r\n                          left: 0,\r\n                          transform: \"translate3d(-106px, 31px, 0px)\",\r\n                        }}\r\n                        data-placement=\"bottom-start\"\r\n                        id=\"subMenu\"\r\n                      >\r\n                        <button\r\n                          type=\"button\"\r\n                          tabIndex={0}\r\n                          className=\"dropdown-item\"\r\n                          id=\"subMenuIcon\"\r\n                        >\r\n                          <em className=\"fa-fw fa fa-plus mr-2\" />\r\n                          <span>Edit contact</span>\r\n                        </button>\r\n\r\n                        {/* <button\r\n                        type=\"button\"\r\n                        tabIndex={0}\r\n                        className=\"dropdown-item\"\r\n\r\n                      >\r\n                        <em className=\"fa-fw fa fa-plus mr-2\" />\r\n                        <span>New contact</span>\r\n                      </button> \r\n\r\n                        <button\r\n                          type=\"button\"\r\n                          tabIndex={0}\r\n                          className=\"dropdown-item\"\r\n                          id=\"subMenuIcon\"\r\n                        >\r\n                          <em className=\"fa-fw fas fa-minus mr-2\" />\r\n                          <span>Delete contact</span>\r\n                        </button>\r\n                        <button\r\n                          type=\"button\"\r\n                          tabIndex={0}\r\n                          className=\"dropdown-item\"\r\n                          id=\"subMenuIcon\"\r\n                        >\r\n                          <em className=\"fa-fw fas fa-share mr-2\" />\r\n                          <span>Share contact</span>\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* End of Menu */}\r\n\r\n                  {/* Start of Card */}\r\n\r\n                  <div className=\"text-center card-body\" id=\"contactCard\">\r\n                    <img\r\n                      className=\" mb-2 rounded-circle-thumb32\"\r\n                      src={profile.imageUrl}\r\n                      alt=\"Contact\"\r\n                      id=\"profilePhoto\"\r\n                    />\r\n                    <h4>{profile.name}</h4>\r\n                    <h5 className=\"text-white\">  {profile.city}</h5>\r\n                    {/* <p>{profile.description}</p>\r\n                    <span>Years in operation: {profile.yearsInOperation}</span> */}\r\n                  </div>\r\n                  <div className=\"d-flex card-footer\">\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-dark btn-lg btn-block\"\r\n                      onClick={() => this.showModal(profile.id)}\r\n                    >\r\n                      View Contact\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n            <SingleCleanerView  \r\n            single={this.props.singleCleaner}\r\n            isModal={this.state.modal}\r\n            toggle={this.toggle}\r\n            updateContact={this.updateSingleContact}\r\n            deleteContact={this.deleteContactUserConfirmation}\r\n            />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToPros(store) {\r\n  return {\r\n    cleaners: store.cleaners,\r\n    singleCleaner: store.singleCleaner\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToPros, { getCleaners, GetSingleCleaner, deleteCleaner })(ContactCleaners);\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./ContactStyles.css\";\r\n// import ProfileContact from \"./ProfileContact\";\r\nimport ContactHeading from \"./ContactHeading\";\r\nimport ContactCleaners from \"./ContactCleaners\";\r\n\r\nclass Contact extends React.Component {\r\n  state = {\r\n    imageLoaded: false,\r\n   \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"content-wrapper\">\r\n          <ContactHeading history={this.props.history}/>\r\n            <ContactCleaners history={this.props.history}/>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Contact;\r\n","import axios from \"axios\";\r\n\r\nexport const getCleaners = (dispatch) => {\r\n  return (dispatch) => {\r\n  dispatch({ type: \"FETCH_CLEANERS_START\" });\r\n  axios\r\n    .get(\"https://localhost:5001/api/cleaners\")\r\n    .then((response) => {\r\n      dispatch({\r\n        type: \"RECEIVE_CLEANERS\",\r\n        payload: response.data,\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: \"FETCH_CLEANERS_ERROR\",\r\n        payload: error,\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\nexport const addCleaner = (user) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .post(\"https://localhost:5001/api/cleaners\",  user )\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"ADD_CLEANER\",\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: \"ADD_CLEANER_ERROR\",\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const GetSingleCleaner = (id) => {\r\n  // debugger;\r\n  return (dispatch) => {\r\n    axios\r\n      .get(`https://localhost:5001/api/cleaners/${id}` )\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"GET_SINGLE_CLEANER\",\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: \"GET_SINGLE_CLEANER_ERROR\",\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\nexport const updateCleaner = (user) => {\r\n  // debugger;\r\n  return (dispatch) => {\r\n    axios\r\n      // .put(\"https://localhost:5001/api/cleaners/\", user )\r\n      .put(`https://localhost:5001/api/cleaners/${user.id}`, user )\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"UPDATE_CLEANER\",\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: \"UPDATE_CLEANER_ERROR\",\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\nexport const deleteCleaner = (id) => {\r\n  return (dispatch) => {\r\n    axios\r\n      .delete(`https://localhost:5001/api/cleaners/${id}` )\r\n      .then((response) => {\r\n        dispatch({\r\n          type: \"DELETE_CLEANER\",\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: \"DELETE_CLEANER_ERROR\",\r\n          payload: error,\r\n        });\r\n      });\r\n  };\r\n};\r\n"],"sourceRoot":""}